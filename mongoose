const express=require ('express')
const mongoose=require('mongoose')
const cors=require ('cors')

const port=5000;

const UserModal=require('./models/Users')
const app=express()
app.use(express.json())
app.use(cors())


mongoose.connect("mongodb+srv://angel:angelbel@cluster0.zdy2k51.mongodb.net/user")

app.post('/users/register', (req, res) => {
 UserModel.create (req,res)
  UserModal.create(req,body)
  .then(user=>res.json(user))
  .catch(err=>res.json(err))
 
});



app.listen(5000, () => {
  console.log(`Server is running on port ${port}`);
});















// const express = require('express');
// const jwt = require('jsonwebtoken');
// const cors = require('cors');
// const bcrypt = require('bcrypt');

// const app = express();
// const port = 5000;

// app.use(cors());
// app.use(express.json());

// const secretKey = 'mySecretKey';

// const users = [
//   {
//     id: 1,
//     username: 'user123',
//     password: '$2b$10$XVZtBQqMGaD9c.3j5phXr.ZyJ32sTJyPBR4K2OpXpDpP1Zt.YN8ae', // hashed 'password123'
//   },
//   {
//     id: 2,
//     username: 'anotherUser',
//     password: '$2b$10$XVZtBQqMGaD9c.3j5phXr.ZyJ32sTJyPBR4K2OpXpDpP1Zt.YN8ae', // hashed 'password123'
//   },
// ];

// app.post('/users/login', (req, res) => {
//   const { username, password } = req.body;

//   // Find the user by username
//   const user = users.find((user) => user.username === username);

//   if (!user || !bcrypt.compareSync(password, user.password)) {
//     return res.status(401).json({ message: 'Invalid username or password' });
//   }

//   // Create a JWT token
//   const token = jwt.sign({ username }, secretKey, { expiresIn: '1d' });

//   res.json({ token });
// });

// app.post('/users/register', async (req, res) => {
//   const { username, password } = req.body;

//   // Check if the username is already taken
//   if (users.some((user) => user.username === username)) {
//     return res.status(400).json({ message: 'Username is already taken' });
//   }

//   // Hash the password
//   const hashedPassword = await bcrypt.hash(password, 10);

//   // Add the new user to the array
//   const newUser = {
//     id: users.length + 1,
//     username,
//     password: hashedPassword,
//   };

//   users.push(newUser);

//   res.status(201).json({ message: 'User registered successfully' });
// });

// app.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });




import React, { useState } from 'react';
import axios from 'axios'

const RegistrationForm: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleRegister = async (event: React.FormEvent) => {
    event.preventDefault();
    axios.post('http://localhost:5000/users/register',{username,password}).then(result => 
        console.log(result))
    .catch(err => console.log(err))
  }

  return (
    <div>
      <h2>User Registration</h2>
      <form onSubmit={handleRegister}>
        <label htmlFor="username">Username:</label>
        <input
          type="text"
          id="username"
          name="username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />

        <label htmlFor="password">Password:</label>
        <input
          type="password"
          id="password"
          name="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default RegistrationForm;
